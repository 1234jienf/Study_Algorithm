# 문제
## RGB거리에는 집이 N개 있다. 
## 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.

## 집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 
## 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

### 1번 집의 색은 2번, N번 집의 색과 같지 않아야 한다.
### N번 집의 색은 N-1번, 1번 집의 색과 같지 않아야 한다.
### i(2 ≤ i ≤ N-1)번 집의 색은 i-1, i+1번 집의 색과 같지 않아야 한다.

# 입력
## 첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다. 
## 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다. 집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.

## 두 번째 줄부터 M 개의 줄 중 1+i 번째 줄에는 i, M+i, 2M+i, 3M+i, ... 분에 시작해서
## 1분동안 파란불이 들어오는 횡단보도의 두 끝점 A_i, B_i가 공백으로 주어진다.

# 출력
## 첫 번째 줄에 1 번 지역에서 N 번 지역까지 가는데 필요한 최소 시간을 분단위로 출력한다.
import sys

N = int(input())

ans = 1e9

arr = [list(map(int,input().split())) for _ in range(N)]

for k in range(3):
  dp = [[sys.maxsize]*3 for _ in range(N)]

  dp[0][k] = arr[0][k]

  for i in range(1,N):
    dp[i][0] = min(dp[i-1][1], dp[i-1][2]) + arr[i][0]
    dp[i][1] = min(dp[i-1][0], dp[i-1][2]) + arr[i][1]
    dp[i][2] = min(dp[i-1][0], dp[i-1][1]) + arr[i][2]

  for j in range(3):
    if k != j:
      ans = min(ans,dp[N-1][j])

print(ans)